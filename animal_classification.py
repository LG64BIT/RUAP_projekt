# -*- coding: utf-8 -*-
"""Animal_Classification

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jNxSFhJZvpM-5d0dWbeVqEtE-4A-ZWG3
"""

!pip install -q kaggle

from google.colab import files
files.upload()

!mkdir ~/.kaggle
! cp kaggle.json ~/.kaggle/

! chmod 600 ~/.kaggle/kaggle.json

! kaggle datasets list

!kaggle datasets download -d alessiocorrado99/animals10

!unzip /content/animals10.zip

import numpy as np
import matplotlib.pyplot as plt
import os
import random
import cv2

dir = '/content/raw-img'

classes = ['cane', 'cavallo', 'elefante', 'farfalla', 'gallina', 'gatto', 'mucca', 'pecora', 'ragno', 'scoiattolo']

for cl in classes:
    path = os.path.join(dir, cl)
    for im_path in os.listdir(path):
        img = cv2.imread(os.path.join(path, im_path))
        plt.imshow(img)
        break
    break

img.shape

dataset = []
for cl in classes:
    i=0
    cls_num = classes.index(cl)
    path = os.path.join(dir, cl)
    for img in os.listdir(path):
        try:
            img = cv2.imread(os.path.join(path, img))
            resized_img = cv2.resize(img, (224,224))
            dataset.append([resized_img, cls_num])
            if i >= 500:
              break
            i=i+1
        except Exception as e:
            pass

len(dataset)

random.shuffle(dataset)
for i in dataset[:10]:
    print(classes[i[1]])

x =  []
y = []
for pic, label in dataset:
    x.append(pic)
    y.append(label)

x = np.array(x)

y = np.array(y)

print(type(x),x.shape)
print(type(y),y.shape)

from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications.vgg16 import VGG16
from tensorflow.keras.layers import AveragePooling2D
from tensorflow.keras.layers import Dropout
from tensorflow.keras.layers import Flatten
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import Input
from tensorflow.keras.models import Model
from tensorflow.keras.applications.vgg16 import preprocess_input
from tensorflow.keras.preprocessing.image import img_to_array
from tensorflow.keras.preprocessing.image import load_img
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2)

print(x_train.shape, x_test.shape, y_train.shape, y_test.shape)

translate = ["dog", "horse", "elephant", "butterfly", "chicken", "cat", "cow", "sheep", "spider", "squirrel"]

def img_show(pic, label, index):
    plt.figure(figsize=(15,2))
    plt.imshow(pic[index])
    plt.xlabel(translate[label[index]], fontsize=10)

img_show(x_test, y_test, 8)

IMAGE_SHAPE = [224, 224]

vgg = VGG16(input_shape= IMAGE_SHAPE + [3], weights='imagenet', include_top=False)

for layer in vgg.layers:
    layer.trainable = False

x = Flatten()(vgg.output)
predictions = Dense(10, activation='softmax')(x)

model = Model(inputs = vgg.input, outputs = predictions)

model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

model.fit(x_train, y_train, epochs=5, batch_size=32)

model.evaluate(x_test, y_test)

p = model.predict(x_test)

print(np.argmax(p[0]))

translate[np.argmax(p[0])]

for i in range(5):
    img_show(x_test, y_test, i)

model.save('animal-10.hdf5')